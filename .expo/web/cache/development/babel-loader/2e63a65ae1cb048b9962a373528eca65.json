{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as TaskManager from 'expo-task-manager';\nimport * as Location from 'expo-location';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nvar TASK_FETCH_LOCATION = 'TASK_FETCH_LOCATION';\nvar TASK_CHECK_GEOFENCE = 'TASK_CHECK_GEOFENCE';\nexport var configureBgTasks = function configureBgTasks(_ref) {\n  var setEnterRegion = _ref.setEnterRegion;\n  TaskManager.defineTask(TASK_FETCH_LOCATION, function _callee(_ref2) {\n    var locations, error, _locations, location;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            locations = _ref2.data.locations, error = _ref2.error;\n\n            if (!error) {\n              _context.next = 4;\n              break;\n            }\n\n            console.error(error);\n            return _context.abrupt(\"return\");\n\n          case 4:\n            _locations = _slicedToArray(locations, 1), location = _locations[0];\n\n            try {\n              console.log('tracking in background...', location);\n            } catch (err) {\n              console.error(err);\n            }\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n  TaskManager.defineTask(TASK_CHECK_GEOFENCE, function (_ref3) {\n    var _ref3$data = _ref3.data,\n        eventType = _ref3$data.eventType,\n        region = _ref3$data.region,\n        error = _ref3.error;\n\n    if (error) {\n      return;\n    }\n\n    if (eventType === Location.GeofencingEventType.Enter) {\n      console.log(\"You've entered region:\", region);\n      Alert.alert('You just entered region');\n      var final = region;\n      return final;\n    } else if (eventType === Location.GeofencingEventType.Exit) {\n      console.log(\"You've left region:\", region);\n      Alert.alert('You just left region');\n      var _final = region;\n      return _final;\n    }\n  });\n};","map":{"version":3,"sources":["/Users/verycool/Desktop/reactNative/geohut_sport/components/bg.js"],"names":["TaskManager","Location","TASK_FETCH_LOCATION","TASK_CHECK_GEOFENCE","configureBgTasks","setEnterRegion","defineTask","locations","data","error","console","location","log","err","eventType","region","GeofencingEventType","Enter","Alert","alert","final","Exit"],"mappings":";;AAAA,OAAO,KAAKA,WAAZ,MAA6B,mBAA7B;AACA,OAAO,KAAKC,QAAZ,MAA0B,eAA1B;;AAGA,IAAMC,mBAAmB,GAAG,qBAA5B;AACA,IAAMC,mBAAmB,GAAG,qBAA5B;AAEA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,OAAwB;AAAA,MAArBC,cAAqB,QAArBA,cAAqB;AAEpDL,EAAAA,WAAW,CAACM,UAAZ,CAAuBJ,mBAAvB,EAA4C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAiBK,YAAAA,SAAjB,SAASC,IAAT,CAAiBD,SAAjB,EAA8BE,KAA9B,SAA8BA,KAA9B;;AAAA,iBACtCA,KADsC;AAAA;AAAA;AAAA;;AAExCC,YAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AAFwC;;AAAA;AAAA,wCAKvBF,SALuB,MAKnCI,QALmC;;AAM1C,gBAAI;AACAD,cAAAA,OAAO,CAACE,GAAR,CAAY,2BAAZ,EAAwCD,QAAxC;AACA,aAFJ,CAEK,OAAOE,GAAP,EAAY;AACfH,cAAAA,OAAO,CAACD,KAAR,CAAcI,GAAd;AACD;;AAVyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5C;AAeAb,EAAAA,WAAW,CAACM,UAAZ,CAAuBH,mBAAvB,EAA4C,iBAA4C;AAAA,2BAAzCK,IAAyC;AAAA,QAAjCM,SAAiC,cAAjCA,SAAiC;AAAA,QAAtBC,MAAsB,cAAtBA,MAAsB;AAAA,QAAZN,KAAY,SAAZA,KAAY;;AACtF,QAAIA,KAAJ,EAAW;AAET;AACD;;AACD,QAAIK,SAAS,KAAKb,QAAQ,CAACe,mBAAT,CAA6BC,KAA/C,EAAsD;AACpDP,MAAAA,OAAO,CAACE,GAAR,CAAY,wBAAZ,EAAsCG,MAAtC;AAEAG,MAAAA,KAAK,CAACC,KAAN,CAAY,yBAAZ;AACA,UAAMC,KAAK,GAAIL,MAAf;AACA,aAAOK,KAAP;AACD,KAND,MAMO,IAAIN,SAAS,KAAKb,QAAQ,CAACe,mBAAT,CAA6BK,IAA/C,EAAqD;AAC1DX,MAAAA,OAAO,CAACE,GAAR,CAAY,qBAAZ,EAAmCG,MAAnC;AAEAG,MAAAA,KAAK,CAACC,KAAN,CAAY,sBAAZ;AACA,UAAMC,MAAK,GAAIL,MAAf;AACA,aAAOK,MAAP;AACD;AACF,GAlBD;AAqBC,CAtCE","sourcesContent":["import * as TaskManager from 'expo-task-manager';\nimport * as Location from 'expo-location';\nimport { Alert } from \"react-native\";\n\nconst TASK_FETCH_LOCATION = 'TASK_FETCH_LOCATION';\nconst TASK_CHECK_GEOFENCE = 'TASK_CHECK_GEOFENCE';\n\nexport const configureBgTasks = ({ setEnterRegion }) => {\n    \n    TaskManager.defineTask(TASK_FETCH_LOCATION, async ({ data: { locations }, error }) => {\n      if (error) {\n        console.error(error);\n        return;\n      }\n      const [location] = locations;\n      try {\n          console.log('tracking in background...',location);\n         } catch (err) {\n        console.error(err);\n      }\n    });\n    \n    \n    // 3 Define geofencing task\n    TaskManager.defineTask(TASK_CHECK_GEOFENCE, ({ data: { eventType, region }, error }) => {\n      if (error) {\n        // check `error.message` for more details.\n        return;\n      }\n      if (eventType === Location.GeofencingEventType.Enter) {\n        console.log(\"You've entered region:\", region);\n        //setEnterRegion({ region });\n        Alert.alert('You just entered region')\n        const final  = region\n        return final\n      } else if (eventType === Location.GeofencingEventType.Exit) {\n        console.log(\"You've left region:\", region);\n        //setEnterRegion({ region });\n        Alert.alert('You just left region')\n        const final  = region\n        return final\n      }\n    });\n\n\n    }\n    "]},"metadata":{},"sourceType":"module"}